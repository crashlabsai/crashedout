/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CrashoutsCrashoutSlugRouteImport } from './routes/crashouts/$crashoutSlug'
import { ServerRoute as ApiCrashoutsServerRouteImport } from './routes/api.crashouts'
import { ServerRoute as ApiCrashoutsSlugServerRouteImport } from './routes/api.crashouts.$slug'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CrashoutsCrashoutSlugRoute = CrashoutsCrashoutSlugRouteImport.update({
  id: '/crashouts/$crashoutSlug',
  path: '/crashouts/$crashoutSlug',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiCrashoutsServerRoute = ApiCrashoutsServerRouteImport.update({
  id: '/api/crashouts',
  path: '/api/crashouts',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCrashoutsSlugServerRoute = ApiCrashoutsSlugServerRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => ApiCrashoutsServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/crashouts/$crashoutSlug': typeof CrashoutsCrashoutSlugRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/crashouts/$crashoutSlug': typeof CrashoutsCrashoutSlugRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/crashouts/$crashoutSlug': typeof CrashoutsCrashoutSlugRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/crashouts/$crashoutSlug'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/crashouts/$crashoutSlug'
  id: '__root__' | '/' | '/crashouts/$crashoutSlug'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CrashoutsCrashoutSlugRoute: typeof CrashoutsCrashoutSlugRoute
}
export interface FileServerRoutesByFullPath {
  '/api/crashouts': typeof ApiCrashoutsServerRouteWithChildren
  '/api/crashouts/$slug': typeof ApiCrashoutsSlugServerRoute
}
export interface FileServerRoutesByTo {
  '/api/crashouts': typeof ApiCrashoutsServerRouteWithChildren
  '/api/crashouts/$slug': typeof ApiCrashoutsSlugServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/crashouts': typeof ApiCrashoutsServerRouteWithChildren
  '/api/crashouts/$slug': typeof ApiCrashoutsSlugServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/crashouts' | '/api/crashouts/$slug'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/crashouts' | '/api/crashouts/$slug'
  id: '__root__' | '/api/crashouts' | '/api/crashouts/$slug'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiCrashoutsServerRoute: typeof ApiCrashoutsServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/crashouts/$crashoutSlug': {
      id: '/crashouts/$crashoutSlug'
      path: '/crashouts/$crashoutSlug'
      fullPath: '/crashouts/$crashoutSlug'
      preLoaderRoute: typeof CrashoutsCrashoutSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/crashouts': {
      id: '/api/crashouts'
      path: '/api/crashouts'
      fullPath: '/api/crashouts'
      preLoaderRoute: typeof ApiCrashoutsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/crashouts/$slug': {
      id: '/api/crashouts/$slug'
      path: '/$slug'
      fullPath: '/api/crashouts/$slug'
      preLoaderRoute: typeof ApiCrashoutsSlugServerRouteImport
      parentRoute: typeof ApiCrashoutsServerRoute
    }
  }
}

interface ApiCrashoutsServerRouteChildren {
  ApiCrashoutsSlugServerRoute: typeof ApiCrashoutsSlugServerRoute
}

const ApiCrashoutsServerRouteChildren: ApiCrashoutsServerRouteChildren = {
  ApiCrashoutsSlugServerRoute: ApiCrashoutsSlugServerRoute,
}

const ApiCrashoutsServerRouteWithChildren =
  ApiCrashoutsServerRoute._addFileChildren(ApiCrashoutsServerRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CrashoutsCrashoutSlugRoute: CrashoutsCrashoutSlugRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiCrashoutsServerRoute: ApiCrashoutsServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
